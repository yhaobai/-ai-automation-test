name: Python Interface Automation Tests
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    
jobs:
  run-python-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Update system packages
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            gcc \
            python3-dev \
            libssl-dev \
            ca-certificates \
            openjdk-11-jre  
          wget https://github.com/allure-framework/allure2/releases/download/2.25.0/allure-2.25.0.tgz -O allure.tgz
          tar -zxvf allure.tgz -C /opt/
          echo "PATH=/opt/allure-2.25.0/bin:$PATH" >> $GITHUB_ENV
        shell: bash
      
      - name: Install dependencies with retries
        run: |
          python -m pip install --upgrade pip
          pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
          pip install --retries 5 --timeout 60 -r requirements.txt
          pip install --retries 5 --timeout 60 \
            Flask==2.0.1 \
            Werkzeug==2.0.3 \
            PyJWT==2.3.0 \
            psutil==5.9.0 \
            allure-pytest
          echo "Installed versions:"
          pip list | grep -E "Flask|Werkzeug|PyJWT|psutil|allure-pytest"
        shell: bash

      - name: Debug Allure path
        run: |
          echo "Current PATH: $PATH"
          echo "Allure directory: /opt/allure-2.25.0/bin"
          ls -al /opt/allure-2.25.0/bin
          which allure
        shell: bash

      - name: Verify Allure installation
        run: |
          echo "Checking Allure version..."
          allure --version
        shell: bash

      - name: Verify mock server file
        run: |
          if [ -f "api/mock_server.py" ]; then
              echo "✅ mock_server.py found at: $(realpath api/mock_server.py)"
              head -5 "api/mock_server.py"
              grep "port=" "api/mock_server.py" || echo "⚠️ No port configuration found in mock_server.py"
          else
              echo "❌ mock_server.py not found"
              find . -type f -name "mock_server.py"
              exit 1
          fi
        shell: bash

      - name: Check and free port 3001
        run: |
          port=3001
          pids=$(lsof -t -i:$port || true)
          if [ -n "$pids" ]; then
              echo "⚠️ Port $port is occupied by PIDs: $pids, killing them..."
              sudo kill -9 $pids
              sleep 2
              if lsof -i:$port; then
                  echo "❌ Failed to free port $port"
                  exit 1
              else
                  echo "✅ Port $port is now free"
              fi
          else
              echo "✅ Port $port is available"
          fi
        shell: bash

      - name: Start mock server (background mode)
        run: |
          stdout_log="mock_server_stdout.log"
          stderr_log="mock_server_stderr.log"
          combined_log="mock_server_combined.log"
          
          echo "Starting mock server..."
          
          python api/mock_server.py > "$stdout_log" 2> "$stderr_log" &
          server_pid=$!
          echo $server_pid > "mock_server.pid"
          echo "✅ Mock server started (PID: $server_pid)"
          
          cat "$stdout_log" "$stderr_log" > "$combined_log"
          
          retry_count=0
          max_retries=10
          while [ $retry_count -lt $max_retries ]; do
              retry_count=$((retry_count + 1))
              echo "[$retry_count/$max_retries] Checking server health..."
              
              if curl -s -m 5 "http://localhost:3001/health" > /dev/null; then
                  echo "✅ Server is ready!"
                  break
              else
                  echo "❌ Server not responding yet, retrying in 3 seconds..."
                  cat "$stdout_log" "$stderr_log" > "$combined_log"
                  sleep 3
              fi
              
              if ! ps -p $server_pid > /dev/null; then
                  echo "❌ Mock server process crashed"
                  cat "$combined_log"
                  exit 1
              fi
          done
          
          if [ $retry_count -ge $max_retries ]; then
              echo "❌ Server failed to respond after $max_retries attempts"
              cat "$combined_log"
              
              if lsof -i:3001; then
                  echo "⚠️ Port 3001 is occupied"
              else
                  echo "⚠️ Port 3001 is not occupied (server not running)"
              fi
              
              exit 1
          fi
        shell: bash
        timeout-minutes: 5

      - name: Validate server accessibility
        run: |
          echo "Checking login endpoint..."
          response=$(curl -s -w "%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -d '{"username":"admin","password":"Admin123!"}' \
            "http://localhost:3001/api/v1/users/login")
          
          status_code=${response: -3}
          response_body=${response%???}
          
          echo "Response code: $status_code"
          echo "Response body: $response_body"
          
          if [ "$status_code" -eq 200 ]; then
              echo "✅ Login endpoint accessible"
          else
              echo "❌ Login endpoint failed with status code: $status_code"
              cat "mock_server_combined.log"
              exit 1
          fi
        shell: bash

      - name: Run interface automation tests
        env:
          PYTHONIOENCODING: utf-8
          MOCK_SERVER_URL: "http://localhost:3001"
        run: |
          python run_test.py --junitxml=test-results.xml
        shell: bash

      - name: Check Allure results directory
        run: |
          # 查找最新的报告目录
          latest_report=$(find reports -type d -name 'report_*' | sort -r | head -n 1)
          if [ -z "$latest_report" ]; then
              echo "❌ 找不到任何报告目录"
              exit 1
          fi
          
          result_dir="$latest_report/allure-results"
          if [ ! -d "$result_dir" ] || [ -z "$(ls -A $result_dir)" ]; then
              echo "❌ Allure结果目录为空或缺失: $result_dir"
              exit 1
          else
              echo "✅ Allure结果找到: $result_dir"
              # 保存最新报告路径供后续步骤使用
              echo "LATEST_REPORT=$latest_report" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Generate Allure report
        run: |
          # 使用前面保存的最新报告路径
          allure generate "$LATEST_REPORT/allure-results" -o "$LATEST_REPORT/allure-report" --clean
          echo "✅ Allure报告生成成功: $LATEST_REPORT/allure-report"
          # 复制报告到根目录public文件夹（方便GitHub Pages部署）
          mkdir -p ./public
          cp -r "$LATEST_REPORT/allure-report"/* ./public/
        shell: bash

      - name: Deploy report to GitHub Pages
        if: github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          force_orphan: true

      - name: Generate public report URL
        id: report_url
        run: |
          # 生成GitHub Pages公网访问链接
          echo "::set-output name=url::https://${{ github.repository_owner }}.github.io/${{ github.repository }}/index.html"
        shell: bash

      - name: Upload test results and logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results.xml
            mock_server_combined.log
            reports/**/allure-results/
            reports/**/allure-report/
      
      - name: Stop mock server
        if: always()
        run: |
          if [ -f "mock_server.pid" ]; then
              server_pid=$(cat "mock_server.pid")
              if ps -p $server_pid > /dev/null; then
                  kill -9 $server_pid
                  echo "✅ Mock server stopped (PID: $server_pid)"
              else
                  echo "ℹ️ Mock server already stopped"
              fi
          else
              pids=$(lsof -t -i:3001 || true)
              if [ -n "$pids" ]; then
                  sudo kill -9 $pids
                  echo "✅ Mock server stopped (found via port 3001)"
              else
                  echo "ℹ️ No processes found listening on port 3001"
              fi
          fi
        shell: bash
      
      - name: Send DingTalk notification
        if: github.ref == 'refs/heads/master'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "msgtype": "markdown",
              "markdown": {
                "title": "📊 自动化测试报告",
                "text": "#### 测试结果: ${{ job.status == 'success' && '✅ 成功' || '❌ 失败' }}\n" +
                        "- 提交作者: ${{ github.actor }}\n" +
                        "- 提交信息: ${{ github.event.head_commit.message }}\n" +
                        "- 执行时间: ${{ format('{0:YYYY-MM-DD HH:mm:ss}', github.event.head_commit.timestamp) }}\n" +
                        "- 查看报告: [点击访问](${{ steps.report_url.outputs.url }})"
              }
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.DINGTALK_WEBHOOK }}

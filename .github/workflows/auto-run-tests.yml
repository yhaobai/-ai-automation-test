name: Python Interface Automation Tests
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  run-python-tests:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # 强制安装必要依赖（防止版本兼容问题）
          pip install Flask==2.0.1 PyJWT==2.3.0 psutil==5.9.0
      
      - name: Verify mock server file
        run: |
          if (Test-Path "api/mock_server.py") {
              Write-Host "✅ mock_server.py found at: $(Resolve-Path api/mock_server.py)"
          } else {
              Write-Error "❌ mock_server.py not found in api directory"
              Get-ChildItem -Recurse
              exit 1
          }
        shell: pwsh
      
      - name: Check port 3000 availability
        run: |
          $used = Get-NetTCPConnection -LocalPort 3000 -ErrorAction SilentlyContinue
          if ($used) {
              Write-Error "❌ Port 3000 is in use by process: $($used.OwningProcess)"
              exit 1
          }
          Write-Host "✅ Port 3000 is available"
        shell: pwsh
      
      - name: Start mock server (foreground mode)
        run: |
          $logPath = "mock_server.log"
          # 前台启动并实时输出日志（关键：暴露启动错误）
          Start-Process python -ArgumentList "api/mock_server.py" -NoNewWindow -RedirectStandardOutput $logPath -RedirectStandardError $logPath
          
          # 等待服务启动（最多60秒，每3秒检查一次）
          $maxRetries = 20
          $retryCount = 0
          $portOpen = $false
          while ($retryCount -lt $maxRetries -and -not $portOpen) {
              Start-Sleep -Seconds 3
              $retryCount++
              $portOpen = [bool](Get-NetTCPConnection -LocalPort 3000 -State Listen -ErrorAction SilentlyContinue)
              Write-Host "Waiting for mock server... Attempt $retryCount/$maxRetries"
          }
          
          if (-not $portOpen) {
              Write-Error "❌ Mock server failed to start"
              Write-Host "===== Mock server logs ====="
              Get-Content $logPath -Raw
              exit 1
          }
          Write-Host "✅ Mock server is running on port 3000"
        shell: pwsh
      
      - name: Validate server accessibility
        run: |
          # 验证 127.0.0.1 可访问（关键：替代 0.0.0.0）
          try {
              $response = Invoke-WebRequest -Uri "http://127.0.0.1:3000/api/v1/users/login" -Method Head -TimeoutSec 5
              Write-Host "✅ Server is accessible via http://127.0.0.1:3000"
          } catch {
              Write-Error "❌ Failed to access server: $_"
              exit 1
          }
        shell: pwsh
      
      - name: Run interface automation tests
        env:
          PYTHONIOENCODING: utf-8
          # 强制使用 127.0.0.1（解决 0.0.0.0 解析问题）
          MOCK_SERVER_URL: "http://127.0.0.1:3000"
        run: |
          python run_test.py --junitxml=test-results.xml
      
      - name: Upload test results and logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results.xml
            mock_server.log
      
      - name: Stop mock server
        if: always()
        run: |
          $processes = Get-NetTCPConnection -LocalPort 3000 -ErrorAction SilentlyContinue | ForEach-Object { $_.OwningProcess }
          if ($processes) {
              Stop-Process -Id $processes -Force
              Write-Host "✅ Mock server stopped"
          }
        shell: pwsh
      
      - name: Notify failure
        if: failure() && github.ref == 'refs/heads/master'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

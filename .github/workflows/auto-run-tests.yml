name: Python Interface Automation Tests
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  run-python-tests:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # 锁定兼容版本（解决 werkzeug 导入问题）
          pip install Flask==2.0.1 Werkzeug==2.0.3 PyJWT==2.3.0 psutil==5.9.0
          pip list | findstr "Flask Werkzeug PyJWT"
      
      - name: Verify mock server file
        run: |
          if (Test-Path "api/mock_server.py") {
              Write-Host "✅ mock_server.py found at: $(Resolve-Path api/mock_server.py)"
              Get-Content "api/mock_server.py" -Head 5
          } else {
              Write-Error "❌ mock_server.py not found"
              Get-ChildItem -Recurse
              exit 1
          }
        shell: pwsh
      
      - name: Start mock server (foreground mode)
        run: |
          $logPath = "mock_server_combined.log"
          $errorActionPreference = "Stop"
          $stdoutPath = "stdout.tmp"
          $stderrPath = "stderr.tmp"
          
          # 确保日志文件存在
          New-Item -ItemType File -Path $logPath -Force | Out-Null
          Write-Host "Starting mock server... Logging to $logPath"
      
          try {
              # 直接前台运行（不使用后台作业，确保输出实时捕获）
              $process = Start-Process -FilePath "python" `
                  -ArgumentList "api/mock_server.py" `
                  -PassThru `
                  -NoNewWindow `
                  -RedirectStandardOutput $stdoutPath `
                  -RedirectStandardError $stderrPath
              
              $processId = $process.Id
              Write-Host "Mock server started with PID: $processId"
      
              # 实时合并输出到日志（简化版，避免后台作业延迟）
              Start-Sleep -Seconds 1  # 等待进程初始化文件
              Get-Content $stdoutPath, $stderrPath -Wait -ErrorAction SilentlyContinue | 
                  ForEach-Object {
                      $timestamp = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
                      "$timestamp $_" | Out-File -FilePath $logPath -Append
                      Write-Host "[$timestamp] $_"
                  } &  # 后台运行日志采集
      
              # 检查进程是否存活（立即 + 循环）
              $isAlive = $true
              for ($i=0; $i -lt 5; $i++) {  # 前5秒每1秒检查
                  Start-Sleep -Seconds 1
                  $isAlive = (Get-Process -Id $processId -ErrorAction SilentlyContinue) -ne $null
                  if (-not $isAlive) { break }
              }
      
              if (-not $isAlive) {
                  Write-Error "❌ Mock server process crashed (PID: $processId)"
                  Get-Content $logPath -Raw | Write-Host
                  throw "Process terminated unexpectedly"
              }
      
              # 端口检查（简化逻辑）
              $maxRetries = 20
              $portOpen = $false
              for ($i=1; $i -le $maxRetries; $i++) {
                  $portState = Get-NetTCPConnection -LocalPort 3000 -ErrorAction SilentlyContinue
                  $portOpen = $portState.Where({$_.State -in @("Listen", "Established")}).Count -gt 0
                  
                  Write-Host "[$i/$maxRetries] Port 3000 status: $($portOpen ? "Open" : "Closed")"
                  if ($portOpen) { break }
      
                  # 检查进程是否存活
                  if (-not (Get-Process -Id $processId)) {
                      Write-Error "❌ Process crashed during port check"
                      Get-Content $logPath -Raw | Write-Host
                      throw "Process terminated"
                  }
      
                  Start-Sleep -Seconds 3
              }
      
              if (-not $portOpen) {
                  Write-Error "❌ Port 3000 not open after $maxRetries attempts"
                  Get-Content $logPath -Raw | Write-Host
                  throw "Port timeout"
              }
      
              Write-Host "✅ Mock server is running (PID: $processId, Port: 3000)"
              echo "MOCK_SERVER_PID=$processId" | Out-File $env:GITHUB_ENV -Encoding utf8
      
          } catch {
              Write-Error "❌ Critical error: $_"
              # 强制输出完整日志（即使文件为空）
              if (Test-Path $logPath) {
                  Write-Host "===== Full Log ====="
                  Get-Content $logPath -Raw | Write-Host
              } else {
                  Write-Host "===== Empty Log (process crashed before writing) ====="
              }
              exit 1
          } finally {
              # 清理临时文件
              Remove-Item -Path $stdoutPath, $stderrPath -Force -ErrorAction SilentlyContinue
              # 停止日志采集后台任务
              Get-Job | Where-Object { $_.Name -like "Foreach-Object*" } | Stop-Job -ErrorAction SilentlyContinue
          }
        shell: pwsh
        timeout-minutes: 10
      
      - name: Validate server accessibility
        run: |
          try {
              $response = Invoke-WebRequest -Uri "http://127.0.0.1:3000/api/v1/users/login" `
                -Method POST `
                -Body '{"username":"admin","password":"Admin123!"}' `
                -ContentType "application/json" `
                -TimeoutSec 10
              Write-Host "✅ Server responded: $($response.StatusCode)"
          } catch {
              Write-Error "❌ Server access failed: $_"
              Get-Content "mock_server_combined.log" -Raw
              exit 1
          }
        shell: pwsh
      
      - name: Run interface automation tests
        env:
          PYTHONIOENCODING: utf-8
          MOCK_SERVER_URL: "http://127.0.0.1:3000"
        run: |
          python run_test.py --junitxml=test-results.xml
      
      - name: Upload test results and logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results.xml
            mock_server_combined.log
      
      - name: Stop mock server
        if: always()
        run: |
          $processes = Get-NetTCPConnection -LocalPort 3000 | ForEach-Object { $_.OwningProcess }
          if ($processes) {
              Stop-Process -Id $processes -Force
              Write-Host "✅ Mock server stopped"
          }
        shell: pwsh
      
      - name: Notify failure
        if: failure() && github.ref == 'refs/heads/master'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

name: Python Interface Automation Tests
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  run-python-tests:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Verify mock server file
        run: |
          if (Test-Path "api/mock_server.py") {
              Write-Host "✅ mock_server.py found at: $(Resolve-Path api/mock_server.py)"
          } else {
              Write-Error "❌ mock_server.py not found in api directory"
              Get-ChildItem -Recurse  # 显示整个项目结构，帮助调试
              exit 1
          }
        shell: pwsh
      
      - name: Start mock server
        run: |
          $env:PYTHONIOENCODING = 'utf-8'
          # 启动 mock server 并保存进程 ID
          $process = Start-Process python -ArgumentList "api/mock_server.py --port 3000" -PassThru -NoNewWindow
          $env:MOCK_SERVER_PID = $process.Id
          Write-Host "Mock server started with PID: $env:MOCK_SERVER_PID"
          Start-Sleep -Seconds 10  # 延长等待时间，确保服务器完全启动
        shell: pwsh
        env:
          PYTHONIOENCODING: utf-8
      
      - name: Check mock server status
        run: |
          # 检查 mock server 进程是否仍在运行
          if (Get-Process -Id $env:MOCK_SERVER_PID -ErrorAction SilentlyContinue) {
              Write-Host "✅ Mock server process is running (PID: $env:MOCK_SERVER_PID)"
          } else {
              Write-Error "❌ Mock server process exited unexpectedly"
              exit 1
          }
          
          # 检查端口 3000 是否在监听
          $portStatus = Get-NetTCPConnection -LocalPort 3000 -ErrorAction SilentlyContinue
          if ($portStatus) {
              Write-Host "✅ Port 3000 is listening"
          } else {
              Write-Error "❌ Port 3000 is not being listened on"
              exit 1
          }
          
          # 尝试连接 mock server（如果有健康检查端点）
          try {
              $response = Invoke-WebRequest -Uri "http://localhost:3000/health" -TimeoutSec 5
              if ($response.StatusCode -eq 200) {
                  Write-Host "✅ Mock server responded to health check"
              } else {
                  Write-Error "❌ Mock server returned unexpected status code: $($response.StatusCode)"
                  exit 1
              }
          } catch {
              Write-Host "⚠️ Health check failed, but server is running. Continuing tests..."
              Write-Host "Error: $_"
              # 不退出，继续执行测试，可能服务器需要更多时间
          }
        shell: pwsh
        continue-on-error: true  # 即使健康检查失败，也继续执行测试
      
      - name: Debug network configuration
        run: |
          Write-Host "=== Network Configuration ==="
          ipconfig /all
          
          Write-Host "=== Active TCP Connections ==="
          netstat -ano | Select-String -Pattern "3000"
          
          Write-Host "=== Firewall Status ==="
          Get-NetFirewallProfile | Format-Table Name, Enabled
        shell: pwsh
      
      - name: Run interface automation tests
        env:
          PYTHONIOENCODING: utf-8
          # 添加额外的环境变量，便于调试
          DEBUG_MODE: "true"
          MOCK_SERVER_URL: "http://localhost:3000"
        run: |
          python run_test.py --junitxml=test-results.xml
        continue-on-error: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results.xml
      
      - name: Stop mock server
        if: always()
        run: |
          Write-Host "Stopping mock server (PID: $env:MOCK_SERVER_PID)"
          if (Get-Process -Id $env:MOCK_SERVER_PID -ErrorAction SilentlyContinue) {
              Stop-Process -Id $env:MOCK_SERVER_PID -Force
              Write-Host "✅ Mock server stopped"
          } else {
              Write-Host "⚠️ Mock server process already exited"
          }
          
          # 再次检查端口是否关闭
          $portStatus = Get-NetTCPConnection -LocalPort 3000 -ErrorAction SilentlyContinue
          if ($portStatus) {
              Write-Error "❌ Port 3000 is still being listened on after stopping"
              # 尝试强制关闭所有监听 3000 端口的进程
              Get-NetTCPConnection -LocalPort 3000 | ForEach-Object { 
                  Stop-Process -Id $_.OwningProcess -Force
              }
          } else {
              Write-Host "✅ Port 3000 is closed"
          }
        shell: pwsh
        continue-on-error: true
      
      - name: Notify failure
        if: failure() && github.ref == 'refs/heads/master'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

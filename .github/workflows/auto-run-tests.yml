name: Python Interface Automation Tests
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  run-python-tests:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # 额外安装端口检测工具（可选，增强调试）
          pip install psutil
      
      - name: Verify mock server file
        run: |
          if (Test-Path "api/mock_server.py") {
              Write-Host "✅ mock_server.py found at: $(Resolve-Path api/mock_server.py)"
          } else {
              Write-Error "❌ mock_server.py not found in api directory"
              Get-ChildItem -Recurse
              exit 1
          }
        shell: pwsh
      
      - name: Start mock server (with log output)
        run: |
          # 关键修改：将 mock server 日志输出到文件，方便排查启动错误
          $logPath = "mock_server.log"
          
          # 关键修改：在启动命令中指定 host=0.0.0.0
          Start-Job -ScriptBlock {
            param($scriptPath, $logPath)
            & python $scriptPath --host 0.0.0.0 --port 3000 2>&1 | Out-File $logPath -Encoding utf8
          } -ArgumentList "api/mock_server.py", $logPath
          
          # 等待并检测服务是否启动（最多等待 30 秒，每 2 秒检查一次）
          $maxRetries = 15
          $retryCount = 0
          $portOpen = $false
          while ($retryCount -lt $maxRetries -and -not $portOpen) {
            Start-Sleep -Seconds 2
            $retryCount++
            
            # 关键修改：同时检查 0.0.0.0 和 127.0.0.1 上的端口监听情况
            $portOpen = [bool](Get-NetTCPConnection -LocalPort 3000 -State Listen -ErrorAction SilentlyContinue)
            
            Write-Host "等待 mock server 启动... 已尝试 $retryCount/$maxRetries 次"
          }
          
          if (-not $portOpen) {
            Write-Error "❌ mock server 启动失败，3000 端口未监听"
            # 输出日志帮助排查
            if (Test-Path $logPath) {
              Write-Host "===== mock server 日志 ====="
              Get-Content $logPath
            }
            
            # 额外输出系统网络状态帮助诊断
            Write-Host "===== 系统网络状态 ====="
            netstat -ano | Select-String "3000"
            
            exit 1
          } else {
            Write-Host "✅ mock server 已启动，3000 端口正常监听"
            
            # 输出服务监听详情
            Write-Host "===== 服务监听详情 ====="
            Get-NetTCPConnection -LocalPort 3000 | Format-List
          }
        shell: pwsh
      
      - name: Run interface automation tests
        env:
          PYTHONIOENCODING: utf-8
          # 关键修改：使用 0.0.0.0 作为服务器地址
          MOCK_SERVER_URL: "http://0.0.0.0:3000"
        run: |
          python run_test.py --junitxml=test-results.xml
        # 取消 continue-on-error，让失败直接暴露问题
      
      - name: Upload test results and logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-and-logs
          path: |
            test-results.xml
            mock_server.log  # 上传 mock server 日志方便调试
      
      - name: Stop mock server
        if: always()
        run: |
          # 先停止后台 job，再杀进程（双重保险）
          Stop-Job * -ErrorAction SilentlyContinue
          Get-NetTCPConnection -LocalPort 3000 -ErrorAction SilentlyContinue | 
          ForEach-Object { $_.OwningProcess } |
          Get-Process |
          Stop-Process -Force
        shell: pwsh
      
      - name: Notify failure
        if: failure() && github.ref == 'refs/heads/master'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

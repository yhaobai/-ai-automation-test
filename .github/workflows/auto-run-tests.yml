from flask import Flask, request, jsonify
import json
import os
import jwt
from datetime import datetime, timedelta
from functools import wraps

app = Flask(__name__)
app.config['SECRET_KEY'] = 'mock_jwt_secret'
PORT = 3000

# 数据存储路径
DATA_DIR = 'data'
USERS_FILE = os.path.join(DATA_DIR, 'users.json')

# 确保数据目录存在
os.makedirs(DATA_DIR, exist_ok=True)

# 新增：尝试释放端口（仅 Windows 有效，其他系统可按需调整）
def release_port(port):
    if os.name == 'nt':
        # 通过 netstat + taskkill 强制释放端口
        os.system(f'netstat -ano | findstr :{port} | findstr LISTENING | '
                  f'for /f "tokens=5" %a in (\'netstat -ano ^| findstr :{port}\') do taskkill /f /pid %a')

# 启动前释放端口
release_port(PORT)

# 初始化数据（保持原逻辑）
def init_data():
    if not os.path.exists(USERS_FILE):
        initial_users = [
            {
                "user_id": 1,
                "username": "admin",
                "password": "Admin123!",
                "email": "admin@example.com",
                "phone": "13800138001",
                "avatar": "http://example.com/avatar/1.jpg",
                "create_time": "2023-01-01 10:00:00",
                "update_time": "2023-01-02 15:30:00",
                "role": "admin",
                "status": 1
            },
            {
                "user_id": 2,
                "username": "test_user",
                "password": "Test123!",
                "email": "test@example.com",
                "phone": "13800138000",
                "avatar": "http://example.com/avatar/2.jpg",
                "create_time": "2023-01-02 10:00:00",
                "update_time": "2023-01-03 15:30:00",
                "role": "user",
                "status": 1
            }
        ]
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(initial_users, f, indent=2, ensure_ascii=False)

# 读取、保存用户数据（保持原逻辑）
def get_users():
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"读取用户数据失败: {e}")
        return []

def save_users(users):
    try:
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(users, f, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        print(f"保存用户数据失败: {e}")
        return False

# JWT 生成、验证（保持原逻辑）
def generate_token(user):
    return jwt.encode(
        {
            'user_id': user['user_id'],
            'username': user['username'],
            'role': user['role'],
            'exp': datetime.utcnow() + timedelta(hours=1)
        },
        app.config['SECRET_KEY'],
        algorithm='HS256'
    )

def verify_token(token):
    if not token:
        return None
    try:
        decoded = jwt.decode(
            token,
            app.config['SECRET_KEY'],
            algorithms=['HS256']
        )
        return decoded
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None

def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = None
        if 'Authorization' in request.headers:
            auth_header = request.headers['Authorization']
            if auth_header.startswith('Bearer '):
                token = auth_header.split(' ')[1]
        if not token:
            return jsonify({'code': 40009, 'message': '令牌无效'}), 401
        decoded = verify_token(token)
        if not decoded:
            return jsonify({'code': 40009, 'message': '令牌无效'}), 401
        return f(decoded, *args, **kwargs)
    return decorated

# 接口逻辑（保持原逻辑）
@app.post('/api/v1/users/register')
def register():
    # ... 原注册接口代码 ...
    return jsonify({
        'code': 200,
        'message': '注册成功',
        'data': {
            'user_id': new_user['user_id'],
            'username': new_user['username'],
            'email': new_user['email'],
            'create_time': new_user['create_time']
        }
    }), 200

@app.post('/api/v1/users/login')
def login():
    # ... 原登录接口代码 ...
    return jsonify({
        'code': 200,
        'message': '登录成功',
        'data': {
            'token': token,
            'token_type': 'Bearer',
            'expires_in': 3600,
            'user_info': {
                'user_id': user['user_id'],
                'username': user['username'],
                'email': user['email'],
                'role': user['role']
            }
        }
    }), 200

# 其他接口（get_user、update_user、delete_user、create_admin_user 等）保持原逻辑 ...

if __name__ == '__main__':
    init_data()
    print(f'Mock服务已启动，运行在 http://localhost:{PORT}')
    app.run(host='0.0.0.0', port=PORT, debug=True)

name: Python Interface Automation Tests
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  run-python-tests:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # 锁定兼容版本（解决 werkzeug 导入问题）
          pip install Flask==2.0.1 Werkzeug==2.0.3 PyJWT==2.3.0 psutil==5.9.0
          pip list | findstr "Flask Werkzeug PyJWT"
      
      - name: Verify mock server file
        run: |
          if (Test-Path "api/mock_server.py") {
              Write-Host "✅ mock_server.py found at: $(Resolve-Path api/mock_server.py)"
              Get-Content "api/mock_server.py" -Head 5
          } else {
              Write-Error "❌ mock_server.py not found"
              Get-ChildItem -Recurse
              exit 1
          }
        shell: pwsh
      
      - name: Start mock server (foreground mode)
        run: |
          $logPath = "mock_server_combined.log"
          $errorActionPreference = "Stop"
          $stdoutPath = "stdout.tmp"
          $stderrPath = "stderr.tmp"
          
          # 确保日志文件存在
          New-Item -ItemType File -Path $logPath -Force | Out-Null
          
          Write-Host "Starting mock server..." -ForegroundColor Cyan
          
          try {
              # 启动进程并捕获详细信息
              $process = Start-Process -FilePath "python" `
                  -ArgumentList "api/mock_server.py" `
                  -PassThru `
                  -NoNewWindow `
                  -RedirectStandardOutput $stdoutPath `
                  -RedirectStandardError $stderrPath
              
              $processId = $process.Id
              Write-Host "Mock server started with PID: $processId" -ForegroundColor Green
              
              # 启动后台作业监控日志
              $logTask = Start-Job -ScriptBlock {
                  param($stdout, $stderr, $log)
                  
                  # 等待文件创建
                  while (-not (Test-Path $stdout -PathType Leaf)) { Start-Sleep -Milliseconds 100 }
                  while (-not (Test-Path $stderr -PathType Leaf)) { Start-Sleep -Milliseconds 100 }
                  
                  # 合并输出流并添加时间戳
                  $stdoutReader = New-Object System.IO.StreamReader($stdout)
                  $stderrReader = New-Object System.IO.StreamReader($stderr)
                  
                  try {
                      while (-not $stdoutReader.EndOfStream -or -not $stderrReader.EndOfStream) {
                          if (-not $stdoutReader.EndOfStream) {
                              $line = $stdoutReader.ReadLine()
                              $timestamp = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
                              "$timestamp [STDOUT] $line" | Out-File -FilePath $log -Append
                              Write-Host "[$timestamp] $line"
                          }
                          if (-not $stderrReader.EndOfStream) {
                              $line = $stderrReader.ReadLine()
                              $timestamp = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
                              "$timestamp [STDERR] $line" | Out-File -FilePath $log -Append
                              Write-Host "[$timestamp] $line" -ForegroundColor Red
                          }
                          Start-Sleep -Milliseconds 100
                      }
                  }
                  finally {
                      $stdoutReader.Close()
                      $stderrReader.Close()
                  }
              } -ArgumentList $stdoutPath, $stderrPath, $logPath
              
              # 检查进程是否启动成功
              Start-Sleep -Seconds 2
              if (-not (Get-Process -Id $processId -ErrorAction SilentlyContinue)) {
                  Write-Error "❌ Mock server failed to start (进程未启动)" -ForegroundColor Red
                  Get-Content $stdoutPath, $stderrPath -Raw | Write-Error
                  throw "Mock server process not found"
              }
              
              Write-Host "✅ Mock server process is running. Waiting for port 3000 to open..." -ForegroundColor Green
              
              # 等待服务监听端口
              $maxRetries = 20
              $retryCount = 0
              $portOpen = $false
              
              while ($retryCount -lt $maxRetries -and -not $portOpen) {
                  Start-Sleep -Seconds 3
                  $retryCount++
                  
                  # 检查端口状态
                  $portState = Get-NetTCPConnection -LocalPort 3000 -ErrorAction SilentlyContinue
                  $portOpen = $portState.Count -gt 0 -and ($portState.State -contains "Listen" -or $portState.State -contains "Established")
                  
                  Write-Host "[$(Get-Date)] Waiting for mock server... Attempt $retryCount/$maxRetries"
                  
                  # 检查进程是否崩溃
                  if (-not (Get-Process -Id $processId -ErrorAction SilentlyContinue)) {
                      Write-Error "❌ Mock server process crashed (PID: $processId)" -ForegroundColor Red
                      Get-Content $stdoutPath, $stderrPath -Raw | Write-Error
                      throw "Mock server process crashed"
                  }
              }
              
              # 最终端口检查
              if (-not $portOpen) {
                  Write-Error "❌ Mock server failed to listen on port 3000 after $maxRetries retries" -ForegroundColor Red
                  Get-Content $logPath -Raw | Write-Error
                  throw "Port 3000 not opened after timeout"
              }
              
              Write-Host "✅ Mock server is running on port 3000" -ForegroundColor Green
              
              # 保存进程ID到环境变量，供后续步骤使用
              echo "MOCK_SERVER_PID=$processId" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
          }
          catch {
              Write-Error "❌ Failed to start mock server: $_" -ForegroundColor Red
              
              # 输出完整日志
              if (Test-Path $logPath) {
                  Write-Host "===== Full log =====" -ForegroundColor Yellow
                  Get-Content $logPath -Raw | Write-Host
              }
              
              # 清理资源
              if (Get-Job -Id $logTask.Id -ErrorAction SilentlyContinue) {
                  Stop-Job $logTask
                  Remove-Job $logTask
              }
              
              if (Test-Path $stdoutPath) { Remove-Item $stdoutPath -Force }
              if (Test-Path $stderrPath) { Remove-Item $stderrPath -Force }
              
              exit 1
          }
        shell: pwsh
        timeout-minutes: 10
      
      - name: Validate server accessibility
        run: |
          try {
              $response = Invoke-WebRequest -Uri "http://127.0.0.1:3000/api/v1/users/login" `
                -Method POST `
                -Body '{"username":"admin","password":"Admin123!"}' `
                -ContentType "application/json" `
                -TimeoutSec 10
              Write-Host "✅ Server responded: $($response.StatusCode)"
          } catch {
              Write-Error "❌ Server access failed: $_"
              Get-Content "mock_server_combined.log" -Raw
              exit 1
          }
        shell: pwsh
      
      - name: Run interface automation tests
        env:
          PYTHONIOENCODING: utf-8
          MOCK_SERVER_URL: "http://127.0.0.1:3000"
        run: |
          python run_test.py --junitxml=test-results.xml
      
      - name: Upload test results and logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results.xml
            mock_server_combined.log
      
      - name: Stop mock server
        if: always()
        run: |
          $processes = Get-NetTCPConnection -LocalPort 3000 | ForEach-Object { $_.OwningProcess }
          if ($processes) {
              Stop-Process -Id $processes -Force
              Write-Host "✅ Mock server stopped"
          }
        shell: pwsh
      
      - name: Notify failure
        if: failure() && github.ref == 'refs/heads/master'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

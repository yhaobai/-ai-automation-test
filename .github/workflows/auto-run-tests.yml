name: Python Interface Automation Tests
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  run-python-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # 锁定兼容版本（解决 werkzeug 导入问题）
          pip install Flask==2.0.1 Werkzeug==2.0.3 PyJWT==2.3.0 psutil==5.9.0
          pip list | findstr "Flask Werkzeug PyJWT"
      
      - name: Verify mock server file
        run: |
          if (Test-Path "api/mock_server.py") {
              Write-Host "✅ mock_server.py found at: $(Resolve-Path api/mock_server.py)"
              Get-Content "api/mock_server.py" -Head 5
          } else {
              Write-Error "❌ mock_server.py not found"
              Get-ChildItem -Recurse
              exit 1
          }
        shell: pwsh

      - name: Disable firewall (test only)
        run: |
          Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
        shell: pwsh
        # 仅测试用，生产环境建议配置防火墙规则而非直接关闭
        
      
      - name: Start mock server (background mode)
        run: |
          $stdoutLogPath = "mock_server_stdout.log"
          $stderrLogPath = "mock_server_stderr.log"
          $combinedLogPath = "mock_server_combined.log"
          $errorActionPreference = "Stop"
          
          Write-Host "Starting mock server..."
          
          try {
              # 异步启动服务器，分别重定向标准输出和错误输出
              $process = Start-Process python -ArgumentList "api/mock_server.py" -PassThru -NoNewWindow -RedirectStandardOutput $stdoutLogPath -RedirectStandardError $stderrLogPath
              
              # 保存进程 ID 供后续步骤使用
              $process.Id | Out-File -FilePath "mock_server.pid" -Encoding utf8
              Write-Host "✅ Mock server started (PID: $($process.Id))"
              
              # 合并日志文件（可选，便于查看）
              Get-Content $stdoutLogPath | Out-File -FilePath $combinedLogPath -Encoding utf8
              Get-Content $stderrLogPath | Out-File -FilePath $combinedLogPath -Encoding utf8 -Append
              
              # 健康检查（最多尝试 30 秒）
              $retryCount = 0
              $maxRetries = 10
              
              while ($retryCount -lt $maxRetries) {
                  $retryCount++
                  Write-Host "[$retryCount/$maxRetries] Checking server health..."
                  
                  try {
                      # 尝试访问健康检查接口
                      $response = Invoke-WebRequest -Uri "http://localhost:3000/health" -TimeoutSec 5 -ErrorAction Stop
                      
                      if ($response.StatusCode -eq 200) {
                          Write-Host "✅ Server is ready!"
                          break
                      }
                  } catch {
                      Write-Host "❌ Server not responding yet, retrying in 3 seconds..."
                      # 更新合并日志
                      Get-Content $stdoutLogPath | Out-File -FilePath $combinedLogPath -Encoding utf8
                      Get-Content $stderrLogPath | Out-File -FilePath $combinedLogPath -Encoding utf8 -Append
                      Start-Sleep -Seconds 3
                  }
                  
                  # 检查进程是否仍在运行
                  if (-not (Get-Process -Id $process.Id -ErrorAction SilentlyContinue)) {
                      Write-Error "❌ Mock server process crashed"
                      # 输出最新日志
                      Get-Content $combinedLogPath -Raw | Write-Error
                      exit 1
                  }
              }
              
              if ($retryCount -ge $maxRetries) {
                  Write-Error "❌ Server failed to respond after $maxRetries attempts"
                  # 输出最新日志
                  Get-Content $combinedLogPath -Raw | Write-Error
                  
                  # 额外诊断：检查端口占用情况
                  $portCheck = Get-NetTCPConnection -LocalPort 3000 -ErrorAction SilentlyContinue
                  if ($portCheck) {
                      Write-Error "⚠️ Port 3000 is occupied by PID: $($portCheck.OwningProcess)"
                  } else {
                      Write-Error "⚠️ Port 3000 is not occupied, server not running as expected"
                  }
                  
                  exit 1
              }
          } catch {
              Write-Error "❌ Failed to start mock server: $_"
              # 输出最新日志
              Get-Content $combinedLogPath -Raw | Write-Error
              exit 1
          }
        shell: pwsh
        timeout-minutes: 5
      
      - name: Validate server accessibility
        run: |
          try {
              $response = Invoke-WebRequest -Uri "http://localhost:3000/api/v1/users/login" `
                -Method POST `
                -Body '{"username":"admin","password":"Admin123!"}' `
                -ContentType "application/json" `
                -TimeoutSec 10
              
              if ($response.StatusCode -eq 200) {
                  Write-Host "✅ Login endpoint accessible"
              } else {
                  Write-Error "❌ Unexpected response: $($response.StatusCode)"
                  $response.Content | Write-Error
                  exit 1
              }
          } catch {
              Write-Error "❌ Server access failed: $_"
              Get-Content "mock_server_combined.log" -Raw | Write-Error
              exit 1
          }
        shell: pwsh
      
      - name: Run interface automation tests
        env:
          PYTHONIOENCODING: utf-8
          MOCK_SERVER_URL: "http://127.0.0.1:3000"
        run: |
          python run_test.py --junitxml=test-results.xml
      
      - name: Upload test results and logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results.xml
            mock_server_combined.log
      
      - name: Stop mock server
        if: always()
        run: |
          if (Test-Path "mock_server.pid") {
              $pid = Get-Content "mock_server.pid"
              if (Get-Process -Id $pid -ErrorAction SilentlyContinue) {
                  Stop-Process -Id $pid -Force
                  Write-Host "✅ Mock server stopped (PID: $pid)"
              } else {
                  Write-Host "ℹ️ Mock server already stopped"
              }
          } else {
              # 备用方案：通过端口查找进程
              $processes = Get-NetTCPConnection -LocalPort 3000 -ErrorAction SilentlyContinue | ForEach-Object { $_.OwningProcess }
              if ($processes) {
                  Stop-Process -Id $processes -Force
                  Write-Host "✅ Mock server stopped (found via port 3000)"
              } else {
                  Write-Host "ℹ️ No processes found listening on port 3000"
              }
          }
        shell: pwsh
      
      - name: Notify failure
        if: failure() && github.ref == 'refs/heads/master'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
